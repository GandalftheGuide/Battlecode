package ProtoPlayer;

import java.util.ArrayList;

import battlecode.common.*;

public class Archon{
	public static RobotController rc = RobotPlayer.rc;
	public static ArrayList<RobotInfo> closeNeut = new ArrayList<RobotInfo>();
	public static ArrayList<RobotInfo> farNeut = new ArrayList<RobotInfo>();
	public static boolean neutInProx = true;
	public static int id;

	public static void setRun() throws GameActionException{

		if(rc.getRoundNum()==0)
		{
			Signal[] incomingMessages = rc.emptySignalQueue();

			if(incomingMessages.length==0)
			{
				id = incomingMessages.length;
			}else{

//				Signal currentMessage = null;
//				for(int messageIndex = 0; messageIndex<incomingMessages.length;messageIndex++)
//				{
//					currentMessage = incomingMessages[messageIndex];
//					if(rc.getTeam()==currentMessage.getTeam())
//						break;
//				}
			}
			rc.broadcastMessageSignal(0, 0, 255);
			
		}else{
			if(id == 0){
				Utility.sendingInstructions();
				if(rc.isCoreReady()&&rc.canBuild(Direction.NORTH, RobotType.SOLDIER))
					rc.build(Utility.isClear(Direction.NORTH), RobotType.SOLDIER);
			}else{
				MapLocation archon = Utility.followingInstructions();
				Utility.advance(rc.getLocation().directionTo(archon), 1);
				if(rc.isCoreReady() && rc.canBuild(Direction.NORTH, RobotType.SCOUT))
					rc.build(Utility.isClear(Direction.NORTH), RobotType.SCOUT);
			}
			if(neutInProx){
				activeNeut();
			}
			else{
				if(rc.isCoreReady() && rc.canBuild(Direction.NORTH, RobotType.SCOUT)){
					rc.build(Utility.isClear(Direction.NORTH), RobotType.SCOUT);
				}
			}
		}

	}

	public static void activeNeut() throws GameActionException{

		RobotInfo[] neutR = rc.senseNearbyRobots(25, Team.NEUTRAL);

		for(int i = 0; i<neutR.length; i++){
			if(rc.getLocation().distanceSquaredTo(neutR[i].location) < 3){
				closeNeut.add(neutR[i]);
			}
			if(rc.getLocation().distanceSquaredTo(neutR[i].location) >= 3){
				farNeut.add(neutR[i]);
			}
		}
		if((farNeut.isEmpty() && closeNeut.isEmpty()) || rc.getRoundNum() > 9){
			neutInProx = false;
		}

		if(closeNeut.size()>0){
			for(int i = 0; i<closeNeut.size(); i++){
				if(rc.isCoreReady()){
					rc.activate(closeNeut.remove(0).location);
				}
			}
		}else if(farNeut.size()>0){
			for(int i = 0; i<farNeut.size(); i++){
				if(rc.isCoreReady()){
					Utility.advance(rc.getLocation().directionTo(farNeut.get(i).location),1);
				}
			}
		}
	}

}
